{"version":3,"file":"lite-vimeo-embed.js","sources":["../src/utils.js","../node_modules/style-inject/dist/style-inject.es.js","../src/lite-vimeo-embed.js"],"sourcesContent":["\n/**\n * Add a <link rel={preload | preconnect} ...> to the head\n */\nexport function addPrefetch(kind, url, as) {\n    const linkElem = document.createElement('link');\n    linkElem.rel = kind;\n    linkElem.href = url;\n    if (as) {\n        linkElem.as = as;\n    }\n    linkElem.crossorigin = true;\n    document.head.appendChild(linkElem);\n}\n\nexport function canUseWebP() {\n    var elem = document.createElement('canvas');\n\n    if (elem.getContext && elem.getContext('2d')) {\n        // was able or not to get WebP representation\n        return elem.toDataURL('image/webp').indexOf('data:image/webp') === 0;\n    }\n\n    // very old browser like IE 8, canvas not supported\n    return false;\n}\n\n/**\n * Get the thumbnail dimensions to use for a given player size.\n *\n * @param {Object} options\n * @param {number} options.width The width of the player\n * @param {number} options.height The height of the player\n * @return {Object} The width and height\n */\nexport function getThumbnailDimensions({ width, height }) {\n    let roundedWidth = width;\n    let roundedHeight = height;\n\n    // If the original width is a multiple of 320 then we should\n    // not round up. This is to keep the native image dimensions\n    // so that they match up with the actual frames from the video.\n    //\n    // For example 640x360, 960x540, 1280x720, 1920x1080\n    //\n    // Round up to nearest 100 px to improve cacheability at the\n    // CDN. For example, any width between 601 pixels and 699\n    // pixels will render the thumbnail at 700 pixels width.\n    if (roundedWidth % 320 !== 0) {\n        roundedWidth = Math.ceil(width / 100) * 100;\n        roundedHeight = Math.round((roundedWidth / width) * height);\n    }\n\n    return {\n        width: roundedWidth,\n        height: roundedHeight\n    };\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import './lite-vimeo-embed.css';\nimport { addPrefetch, getThumbnailDimensions, canUseWebP } from './utils.js';\n\n/**\n * Ported from https://github.com/paulirish/lite-youtube-embed\n *\n * A lightweight vimeo embed. Still should feel the same to the user, just MUCH faster to initialize and paint.\n *\n * Thx to these as the inspiration\n *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html\n *   https://autoplay-youtube-player.glitch.me/\n *\n * Once built it, I also found these:\n *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube (👍👍)\n *   https://github.com/Daugilas/lazyYT\n *   https://github.com/vb/lazyframe\n */\nclass LiteVimeo extends HTMLElement {\n    constructor() {\n        super();\n        // TODO: support dynamically setting the attribute via attributeChangedCallback\n    }\n\n    async connectedCallback() {\n        // Gotta encode the untrusted value\n        // https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#rule-2---attribute-escape-before-inserting-untrusted-data-into-html-common-attributes\n        this.videoId = encodeURIComponent(this.getAttribute('videoid'));\n\n        const thumbnailUrl = await this._getThumbnailURL()\n\n        this.style.backgroundImage = `url(\"${thumbnailUrl}\")`;\n\n        const playBtn = document.createElement('button');\n        playBtn.type = 'button';\n        playBtn.classList.add('ltv-playbtn');\n        this.appendChild(playBtn);\n\n        // On hover (or tap), warm up the TCP connections we're (likely) about to use.\n        this.addEventListener('pointerover', LiteVimeo._warmConnections, {\n            once: true\n        });\n\n        // Once the user clicks, add the real iframe and drop our play button\n        // TODO: In the future we could be like amp-youtube and silently swap in the iframe during idle time\n        //   We'd want to only do this for in-viewport or near-viewport ones: https://github.com/ampproject/amphtml/pull/5003\n        this.addEventListener('click', () => this._addIframe());\n    }\n\n    async _getThumbnailURL() {\n\n        /**\n         * Lo, the vimeo placeholder image!  (aka the thumbnail, poster image, etc)\n         * We have to use the Vimeo API.\n         */\n        let { width, height } = getThumbnailDimensions(this.getBoundingClientRect());\n        const devicePixelRatio = window.devicePixelRatio || 1;\n        width *= devicePixelRatio;\n        height *= devicePixelRatio;\n        \n        /**\n         * Thumbnail fetching and comments below are originally\n         * from https://github.com/slightlyoff/lite-vimeo\n         */\n\n        // API is the video-id based\n        // http://vimeo.com/api/v2/video/364402896.json\n        const apiUrl = `https://vimeo.com/api/v2/video/${this.videoId}.json`;\n\n        // Now fetch the JSON that locates our placeholder from vimeo's JSON API\n        const apiResponse = (await (await fetch(apiUrl)).json())[0];\n\n        // Extract the image id, e.g. 819916979, from a URL like:\n        // thumbnail_large: \"https://i.vimeocdn.com/video/819916979_640.jpg\"\n        const tnLarge = apiResponse.thumbnail_large;\n        const imgId = (tnLarge.substr(tnLarge.lastIndexOf(\"/\") + 1)).split(\"_\")[0];\n\n        let thumbnailUrl = `https://i.vimeocdn.com/video/${imgId}`;\n        thumbnailUrl += `.${canUseWebP() ? 'webp' : 'jpg'}`;\n        thumbnailUrl += `?mw=${width}&mh=${height}&q=${devicePixelRatio > 1 ? 70 : 85}`;\n\n        return thumbnailUrl\n    }\n\n    // // TODO: Support the the user changing the [videoid] attribute\n    // attributeChangedCallback() {\n    // }\n\n    /**\n     * Begin pre-connecting to warm up the iframe load\n     * Since the embed's network requests load within its iframe,\n     *   preload/prefetch'ing them outside the iframe will only cause double-downloads.\n     * So, the best we can do is warm up a few connections to origins that are in the critical path.\n     *\n     * Maybe `<link rel=preload as=document>` would work, but it's unsupported: http://crbug.com/593267\n     * But TBH, I don't think it'll happen soon with Site Isolation and split caches adding serious complexity.\n     */\n    static _warmConnections() {\n        if (LiteVimeo.preconnected) return;\n\n        // The iframe document and most of its subresources come right off player.vimeo.com\n        addPrefetch('preconnect', 'https://player.vimeo.com');\n        // Images\n        addPrefetch('preconnect', 'https://i.vimeocdn.com');\n        // Files .js, .css\n        addPrefetch('preconnect', 'https://f.vimeocdn.com');\n        // Metrics\n        addPrefetch('preconnect', 'https://fresnel.vimeocdn.com');\n\n        LiteVimeo.preconnected = true;\n    }\n\n    _addIframe() {\n        const iframeHTML = `\n<iframe width=\"640\" height=\"360\" frameborder=\"0\"\n  allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen\n  src=\"https://player.vimeo.com/video/${this.videoId}?autoplay=1\"\n></iframe>`;\n        this.insertAdjacentHTML('beforeend', iframeHTML);\n        this.classList.add('ltv-activated');\n    }\n}\n// Register custome element\ncustomElements.define('lite-vimeo', LiteVimeo);\n"],"names":["addPrefetch","kind","url","as","linkElem","document","createElement","rel","href","crossorigin","head","appendChild","css","ref","insertAt","getElementsByTagName","style","type","firstChild","insertBefore","styleSheet","cssText","createTextNode","LiteVimeo","HTMLElement","[object Object]","super","this","videoId","encodeURIComponent","getAttribute","thumbnailUrl","_getThumbnailURL","backgroundImage","playBtn","classList","add","addEventListener","_warmConnections","once","_addIframe","width","height","roundedWidth","roundedHeight","Math","ceil","round","getThumbnailDimensions","getBoundingClientRect","devicePixelRatio","window","apiUrl","tnLarge","fetch","json","thumbnail_large","substr","lastIndexOf","split","elem","getContext","toDataURL","indexOf","preconnected","iframeHTML","insertAdjacentHTML","customElements","define"],"mappings":"AAIA,SAAgBA,EAAYC,EAAMC,EAAKC,GACnC,MAAMC,EAAWC,SAASC,cAAc,QACxCF,EAASG,IAAMN,EACfG,EAASI,KAAON,EACZC,IACAC,EAASD,GAAKA,GAElBC,EAASK,aAAc,EACvBJ,SAASK,KAAKC,YAAYP,ICZ9B,SAAqBQ,EAAKC,QACX,IAARA,IAAiBA,EAAM,IAC5B,IAAIC,EAAWD,EAAIC,SAEnB,GAAgC,oBAAbT,SAAnB,CAEA,IAAIK,EAAOL,SAASK,MAAQL,SAASU,qBAAqB,QAAQ,GAC9DC,EAAQX,SAASC,cAAc,SACnCU,EAAMC,KAAO,WAEI,QAAbH,GACEJ,EAAKQ,WACPR,EAAKS,aAAaH,EAAON,EAAKQ,YAKhCR,EAAKC,YAAYK,GAGfA,EAAMI,WACRJ,EAAMI,WAAWC,QAAUT,EAE3BI,EAAML,YAAYN,SAASiB,eAAeV,y8BCN9C,MAAMW,UAAkBC,YACpBC,cACIC,QAIJD,0BAGIE,KAAKC,QAAUC,mBAAmBF,KAAKG,aAAa,YAEpD,MAAMC,QAAqBJ,KAAKK,IAEhCL,KAAKX,MAAMiB,gBAAkB,QAAQF,MAErC,MAAMG,EAAU7B,SAASC,cAAc,UACvC4B,EAAQjB,KAAO,SACfiB,EAAQC,UAAUC,IAAI,eACtBT,KAAKhB,YAAYuB,GAGjBP,KAAKU,iBAAiB,cAAed,EAAUe,EAAkB,CAC7DC,MAAM,IAMVZ,KAAKU,iBAAiB,QAAS,IAAMV,KAAKa,KAG9Cf,UAMI,IAAIgB,MAAEA,EAAKC,OAAEA,GFnBrB,UAAuCD,MAAEA,EAAKC,OAAEA,IAC5C,IAAIC,EAAeF,EACfG,EAAgBF,EAgBpB,OALIC,EAAe,KAAQ,IACvBA,EAAwC,IAAzBE,KAAKC,KAAKL,EAAQ,KACjCG,EAAgBC,KAAKE,MAAOJ,EAAeF,EAASC,IAGjD,CACHD,MAAOE,EACPD,OAAQE,GEDgBI,CAAuBrB,KAAKsB,yBACpD,MAAMC,EAAmBC,OAAOD,kBAAoB,EACpDT,GAASS,EACTR,GAAUQ,EASV,MAAME,EAAS,kCAAkCzB,KAAKC,eAOhDyB,eAJ4BC,MAAMF,IAASG,QAAQ,GAI7BC,gBAG5B,IAAIzB,EAAe,gCAFJsB,EAAQI,OAAOJ,EAAQK,YAAY,KAAO,GAAIC,MAAM,KAAK,KF3DhF,IACQC,EEgEA,OAHA7B,GAAgB,IF7DhB6B,EAAOvD,SAASC,cAAc,UAE9BsD,EAAKC,YAAcD,EAAKC,WAAW,OAEgC,IAA5DD,EAAKE,UAAU,cAAcC,QAAQ,mBEyDT,OAAS,QAC5ChC,GAAgB,OAAOU,QAAYC,OAAYQ,EAAmB,EAAI,GAAK,KAEpEnB,EAgBXN,WACQF,EAAUyC,eAGdhE,EAAY,aAAc,4BAE1BA,EAAY,aAAc,0BAE1BA,EAAY,aAAc,0BAE1BA,EAAY,aAAc,gCAE1BuB,EAAUyC,cAAe,GAG7BvC,IACI,MAAMwC,EAAa,gMAGatC,KAAKC,kCAErCD,KAAKuC,mBAAmB,YAAaD,GACrCtC,KAAKQ,UAAUC,IAAI,kBAI3B+B,eAAeC,OAAO,aAAc7C"}